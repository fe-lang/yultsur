root = { soi ~ (object | block) ~ eoi  }

object = { "object" ~ string_literal ~ "{" ~ code ~ (data)* ~ "}" }
code = { "code" ~ block }
data = { "data" ~ string_literal ~ hex_literal }

block = { "{" ~ (statement)* ~ "}" }

statement = {
	(block
		| function_definition
		| variable_declaration
		| if_statement
		| for_loop
		| switch
		| break_statement
		| continue_statement
		| leave
		| assignment
		| expression
	)
}

function_definition = { "function" ~ identifier ~ "(" ~ (parameter_list)? ~ ")" ~ ("->" ~ identifier_list)? ~ block }

variable_declaration = { "let" ~ identifier_list ~ (":=" ~ expression)? }

assignment = { identifier_list ~ ":=" ~ expression }

expression = { function_call | identifier | literal }

if_statement = { "if" ~ expression ~ block }

switch = { "switch" ~ expression ~ (((case)+ ~ (default)?) | default) }

case = { "case" ~ literal ~ block }

default = { "default" ~ block }

for_loop = { "for" ~ block ~ expression ~ block ~ block }

break_statement = { "break" }

continue_statement = { "continue" }

leave = { "leave" }

function_call = { identifier ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }

identifier = @ { ( alpha | "_" | "$" )  ~ ( digit | alpha  | "_" | "$" )* }

parameter_list = { identifier ~ ("," ~ identifier)* }
identifier_list = { identifier ~ ("," ~ identifier)* }

literal = {
	number_literal
		| string_literal
		| hex_literal
		| true_literal
		| false_literal
}

number_literal = { hex_number | decimal_number }

hex_literal = { "hex" ~ ("\"" ~ (('0'..'9' | 'a'..'f' | 'A'..'F'){2})* ~ "\"" | "\'" ~ (('0'..'9' | 'a'..'f' | 'A'..'F'){2})* ~ "\'") } // FIXME: can be refactored into "hex_byte"

string_literal = { "\"" ~ ((!("\\" | "\n" | "\r" | "\"") ~ any) | "\\" ~ (!( "\n" ) ~ any))* ~ "\"" }

true_literal = { "true" }

false_literal = { "false" }

hex_number = @ { "0x" ~ ('0'..'9' | 'a'..'f' | 'A'..'F')+ } // TODO: this may need to be flagged atomic to avoid something like "0x deadbeef"

decimal_number = @ { digit+ }

alpha = _ { 'a'..'z' | 'A'..'Z' }

digit = _ { '0'..'9' }

whitespace = _ { " " | "\t" | "\n" }
comment = _ { ( "/*" ~ (!"*/" ~ any)* ~ "*/" | "//" ~ (!"\n" ~ any )* ~ "\n"? ) }
